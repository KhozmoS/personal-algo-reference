struct LCA {
    int MAXN, MAX_LEVEL;
    vi depth;
    vvi parent;
    vvi graph;
//    vvi rmq[MAXN][level];
    LCA(vvi g, int root = 1) {
        MAXN = g.size();
        MAX_LEVEL = (int)__lg(MAXN) + 5;
        graph = g;
        depth.resize(MAXN, 0);
        vi filler(MAX_LEVEL, 0);
        parent.resize(MAXN, filler);
        this->dfs(root, 0);
        this->precomputeSparseMatrix(MAXN-1);
    }

    void dfs(int cur, int prev)
    {
        depth[cur] = depth[prev] + 1;
        parent[cur][0] = prev;
        for (int i=0; i<graph[cur].size(); i++)
        {
            if (graph[cur][i] != prev)
                dfs(graph[cur][i], cur);
        }
    }

    // Dynamic Programming Sparse Matrix Approach
    // populating 2^i parent for each node
    // Time complexity : O(nlogn)
    void precomputeSparseMatrix(int n)
    {
        for (int i=1; i<MAX_LEVEL; i++)
        {
            for (int node = 1; node <= n; node++)
            {
                if (parent[node][i-1] != 0) {
                    parent[node][i] = parent[parent[node][i-1]][i-1];
                }
            }
        }
    }
    int lca(int u, int v) {

        if (depth[v] < depth[u])
            swap(u, v);

        // Step 1 of the pseudocode
        for (int i=MAX_LEVEL-1; i >= 0; i--)
            if (parent[v][i] != 0 && depth[parent[v][i]] >= depth[u] ) {
                v = parent[v][i];
            }
        // now depth[u] == depth[v]
        if (u == v) {
            return u;
        }
        // Step 2 of the pseudocode
        for (int i=MAX_LEVEL-1; i>=0; i--)
            if (parent[u][i] != parent[v][i])
            {
                u = parent[u][i];
                v = parent[v][i];
            }

        return parent[u][0];
    }
};