template <typename T>
struct SparseTable {
    vector < vector<T> > table;
    int n;
    SparseTable( vector<T> v ) {
        vector <T> filler(__lg(v.size())+2);
        table = vector < vector<T> > (v.size(), filler);
        n = v.size();
        for (int i = 0; i < n; i++) {
            table[i][0] = v[i];
        }
    }
    void buildSparseTable()
    {
        for (int j = 1; j <= log2(n); j++)
            for (int i = 0; i <= n - (1 << j); i++)
                table[i][j] = gcd(table[i][j - 1],
                        table[i + (1 << (j - 1))][j - 1]);
    }

    T query(int L, int R)
    {
        int j = (int)log2(R - L + 1);
        return gcd(table[L][j], table[R - (1 << j) + 1][j]);
    }
};